import { createAsyncThunk, createSlice } from "@reduxjs/toolkit";
import axios from "axios";

const initialState = {
  value: 0,
  city: "",
  currentWeather: [],
  forcastedWeather: [],
  error: "",
  status: "idle",
};

// The function below is called a thunk and allows us to perform async logic. It
// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This
// will call the thunk with the `dispatch` function as the first argument. Async
// code can then be executed and other actions can be dispatched. Thunks are
// typically used to make async requests.
export const fetchCurrentWeather = createAsyncThunk(
  "weather/fetchCurrentWeather",
  async (api, { rejectWithValue }) => {
    console.log(api);
    let today = new Date();
    const weather = axios.create({
      baseURL: api,
      headers: {
        Timestamp: today.toISOString(),
      },
    });
    try {
      let response = await weather.get(api);
      console.log(response);
      return response.data;
    } catch (err) {
      if (!err.response) {
        throw err;
      }

      return rejectWithValue(err.response.data.message);
    }

    // The value we return becomes the `fulfilled` action payload
  }
);

export const fetchForcastedWeather = createAsyncThunk(
  "weather/fetchForcastedWeather",
  async (api, { rejectWithValue }) => {
    console.log(api);
    let today = new Date().toISOString();
    const weather = axios.create({
      baseURL: api,
      headers: {
        Timestamp: today,
      },
    });
    try {
      let response = await weather.get(api);
      console.log(response);
      return response.data;
    } catch (err) {
      if (!err.response) {
        throw err;
      }

      return rejectWithValue(err.response.data.message);
    }

    // The value we return becomes the `fulfilled` action payload
  }
);

export const weatherSlice = createSlice({
  name: "weather",
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    increment: (state) => {
      // Redux Toolkit allows us to write "mutating" logic in reducers. It
      // doesn't actually mutate the state because it uses the Immer library,
      // which detects changes to a "draft state" and produces a brand new
      // immutable state based off those changes
      state.value += 1;
    },
    setCity: (state, action) => {
      state.city = action.payload;
    },
  },

  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder.addCase(fetchCurrentWeather.fulfilled, (state, action) => {
      console.log(action.payload);
      state.error = "";
      state.currentWeather = action.payload;
    });
    builder.addCase(
      fetchCurrentWeather.rejected || fetchForcastedWeather.rejected,
      (state, action) => {
        console.log(action.payload);
        state.currentWeather = [];
        state.forcastedWeather = [];
        state.error = action.payload;
      }
    );
    builder.addCase(fetchForcastedWeather.fulfilled, (state, action) => {
      console.log(action.payload);
      state.error = "";
      state.forcastedWeather = action.payload;
    });
  },
});

export const { increment, setCity, decrement, incrementByAmount } =
  weatherSlice.actions;

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.weather.value)`
export const selectCity = (state) => state.weather.city;

export const selectCurrentWeather = (state) => state.weather.currentWeather;

export const selectError = (state) => state.weather.error;

export const selectForcastedWeather = (state) => state.weather.forcastedWeather;

export default weatherSlice.reducer;
